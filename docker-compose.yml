version: '3.5'

services:

  postgres:
    image: postgres:10.4
    volumes:
      - ./.dbdata/.pgsql-data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      DB_NAME: eoslocal
      DB_USER: user
      DB_PASSWORD: pass
      POSTGRES_DB: eoslocal
      VIRTUAL_HOST: postgres.eoslocal.io
      VIRTUAL_PORT: 5432
    networks:
      eoslocal:
        aliases:
          - postgres.eoslocal.io

  pgweb:
    image: sosedoff/pgweb:latest
    restart: always
    ports:
      - "8081:8081"
    environment:
      DATABASE_URL: postgres://user:pass@postgres:5432/eoslocal?sslmode=disable
      VIRTUAL_HOST: pgweb.eoslocal.io
      VIRTUAL_PORT: 8081
    depends_on:
      - postgres
    networks:
      eoslocal:
        aliases:
          - pgweb.eoslocal.io

  flyway:
    image: boxfuse/flyway:5.2.1
    command: -url=jdbc:postgresql://postgres:5432/eoslocal -user=user -password=pass -connectRetries=60 migrate
    volumes:
      - ./services/postgres/migrations:/flyway/sql
    depends_on:
      - postgres
    networks:
      eoslocal:

  mongo:
    image: mongo
    restart: always
    volumes:
      - ./.dbdata/.mongo-data:/data/db
    ports:
      - '27017:27017'
    environment:
      VIRTUAL_HOST: mongo.eoslocal.io
      VIRTUAL_PORT: 27017
    networks:
      eoslocal:
        aliases:
          - mongo.eoslocal.io


  admin-mongo:
    image: mrvautin/adminmongo:latest
    restart: "always"
    ports:
      - '8082:8082'
    environment:
      PORT: 8082
      CONN_NAME: fullnode
      DB_HOST: mongo.eoslocal.io
      DB_PORT: 27017
      VIRTUAL_HOST: admin-mongo.eoslocal.io
      VIRTUAL_PORT: 8082
    depends_on:
      - mongo
      - fullnode
    networks:
      eoslocal:
        aliases:
          - admin-mongo.eoslocal.io

  fullnode:
    build:
      context: ./services/eos-fullnode
      dockerfile: Dockerfile
    image: eoslocal/fullnode
    stop_grace_period: 3m0s
    ports:
      - '8840:8888'
      - '9840:9876'
    environment:
      WAIT_HOSTS: mongo:27017, eosiodev:8888
      WAIT_HOSTS_TIMEOUT: 60
      DATA_DIR: /opt/eosio/bin/data-dir
      VIRTUAL_HOST: fullnode.eoslocal.io
      VIRTUAL_PORT: 8888
    depends_on:
      - mongo
      - eosiodev
    volumes:
      - 'fullnode:/opt/eosio/bin/data-dir'
      - './services/eos-fullnode/config.ini:/opt/eosio/bin/data-dir/config.ini'
    networks:
      eoslocal:
        aliases:
          - fullnode.eoslocal.io

  # only required for dev
  eosiodev:
    build:
      context: ./services/eos-dev
      dockerfile: Dockerfile
    image: eoslocal/eosiodev
    stop_grace_period: 3m0s
    ports:
      - '8888:8888'
      - '9830:9876'
    environment:
      DATA_DIR: /root/data-dir
      CONFIG_DIR: /opt/application/config
      VIRTUAL_HOST: eosiodev.eoslocal.io
      VIRTUAL_PORT: 8888
    volumes:
      - eosiodev:/root/data-dir
      - ./services/eos-dev:/opt/application
    networks:
      eoslocal:
        aliases:
          - eosiodev.eoslocal.io

  demux:
    build:
      context: ./services/demux
      dockerfile: ./Dockerfile
      args:
        SERVICE: 'demux'
    image: eoslocal/demux
    volumes:
      - ./services/demux:/opt/application  # mount demux service folder
      - /opt/application/node_modules # prevents host/container conflicts
    depends_on:
      - mongo
      - postgres
      - eosiodev
    environment:
      DB_USER: user
      DB_PASSWORD: pass
      DB_PORT: 5432
      DB_NAME: eoslocal
      DB_HOST: postgres
      DB_SCHEMA: public
      CHAIN_HOST: 'http://eosiodev:8888'
      CHAIN_INIT_BLOCK: 10
      MONGO_URI: 'mongodb://mongo:27017'
      MONGO_DB: EOSFN
      WAIT_HOSTS: postgres:5432, mongo:27017
      WAIT_HOSTS_TIMEOUT: 60
      VIRTUAL_HOST: demux.eoslocal.io
      VIRTUAL_PORT: 3030
    ports:
      - '3030:3030'
    networks:
      eoslocal:
        aliases:
          - demux.eoslocal.io

  # nginx reverse proxy that allows accesing the services directly on the host machine
  # the wildcard *.esolocal.io that points to 127.0.0.1,
  # therefore as long as you can hit the dns server it will redirect all requests to your machine
  # and nginx-proxy does the internal docker network routing to the right service
  nginx-proxy:
    image: jwilder/nginx-proxy:alpine
    ports:
      - '80:80'
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      eoslocal:

volumes:
  eosiodev:
  fullnode:

networks:
  eoslocal:
    name: eoslocal
